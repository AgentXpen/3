#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>

class XORCommunication {
private:
    static std::vector<uint8_t> hexToBytes(const std::string& hex) {
        std::vector<uint8_t> bytes;
        for (size_t i = 0; i < hex.length(); i += 2) {
            std::string byteString = hex.substr(i, 2);
            uint8_t byte = static_cast<uint8_t>(std::stoi(byteString, nullptr, 16));
            bytes.push_back(byte);
        }
        return bytes;
    }

    static std::string bytesToHex(const std::vector<uint8_t>& bytes) {
        std::stringstream ss;
        ss << std::hex << std::setfill('0');
        for (uint8_t b : bytes) {
            ss << std::setw(2) << static_cast<int>(b);
        }
        return ss.str();
    }

    // Generate a random key
    static std::vector<uint8_t> generateRandomKey(size_t length) {
        std::vector<uint8_t> key(length);
        for (size_t i = 0; i < length; ++i) {
            key[i] = rand() % 256;
        }
        return key;
    }

    // XOR two vectors
    static std::vector<uint8_t> xorBytes(const std::vector<uint8_t>& a, const std::vector<uint8_t>& b) {
        std::vector<uint8_t> result(a.size());
        for (size_t i = 0; i < a.size(); ++i) {
            result[i] = a[i] ^ b[i];
        }
        return result;
    }

public:
    // simulate
    static std::string aliceSend(const std::string& message) {
        std::vector<uint8_t> messageBytes = hexToBytes(message);
        std::vector<uint8_t> aliceKey = generateRandomKey(messageBytes.size());
        std::vector<uint8_t> encryptedMessage = xorBytes(messageBytes, aliceKey);
        return bytesToHex(encryptedMessage) + ":" + bytesToHex(aliceKey);
    }

    // skimulate Bob
    static std::string bobSend(const std::string& encryptedMessageWithAliceKey) {
      
        size_t splitPos = encryptedMessageWithAliceKey.find(':');
        std::string encryptedHex = encryptedMessageWithAliceKey.substr(0, splitPos);
        std::string aliceKeyHex = encryptedMessageWithAliceKey.substr(splitPos + 1);
        std::vector<uint8_t> encryptedBytes = hexToBytes(encryptedHex);
        std::vector<uint8_t> aliceKeyBytes = hexToBytes(aliceKeyHex);
        std::vector<uint8_t> bobKey = generateRandomKey(encryptedBytes.size());
        std::vector<uint8_t> doubleEncryptedMessage = xorBytes(encryptedBytes, bobKey);
        return bytesToHex(doubleEncryptedMessage) + ":" + bytesToHex(bobKey);
    }

    // Final by Alice
    static std::string aliceFinalDecrypt(const std::string& doubleEncryptedMessageWithBobKey) {
       
        size_t splitPos = doubleEncryptedMessageWithBobKey.find(':');
        std::string doubleEncryptedHex = doubleEncryptedMessageWithBobKey.substr(0, splitPos);
        std::string bobKeyHex = doubleEncryptedMessageWithBobKey.substr(splitPos + 1);
        std::vector<uint8_t> doubleEncryptedBytes = hexToBytes(doubleEncryptedHex);
        std::vector<uint8_t> bobKeyBytes = hexToBytes(bobKeyHex);
        std::vector<uint8_t> aliceKey = generateRandomKey(doubleEncryptedBytes.size());
        std::vector<uint8_t> decryptedMessage = xorBytes(doubleEncryptedBytes, bobKeyBytes);
        decryptedMessage = xorBytes(decryptedMessage, aliceKey);
        return bytesToHex(decryptedMessage);
    }

    // Final by Bob
    static std::string bobFinalDecrypt(const std::string& decryptedMessageWithAliceKey) {
        size_t splitPos = decryptedMessageWithAliceKey.find(':');
        std::string decryptedHex = decryptedMessageWithAliceKey.substr(0, splitPos);
        std::string aliceKeyHex = decryptedMessageWithAliceKey.substr(splitPos + 1);
        std::vector<uint8_t> decryptedBytes = hexToBytes(decryptedHex);
        std::vector<uint8_t> aliceKeyBytes = hexToBytes(aliceKeyHex);
        std::vector<uint8_t> bobKey = generateRandomKey(decryptedBytes.size());
        std::vector<uint8_t> originalMessage = xorBytes(decryptedBytes, bobKey);
        
        return bytesToHex(originalMessage);
    }
};

int main() {
    // random number generator
    srand(time(nullptr));
    std::string originalMessage = "48656c6c6f20576f726c64"; // "Hello World" in hex
    std::string aliceEncrypted = XORCommunication::aliceSend(originalMessage);
    std::cout << "Alice's Encrypted Message: " << aliceEncrypted << std::endl;
    std::string bobEncrypted = XORCommunication::bobSend(aliceEncrypted);
    std::cout << "Bob's Encrypted Message: " << bobEncrypted << std::endl;
    std::string aliceDecrypted = XORCommunication::aliceFinalDecrypt(bobEncrypted);
    std::cout << "Alice's Decrypted Message: " << aliceDecrypted << std::endl;
    std::string bobDecrypted = XORCommunication::bobFinalDecrypt(aliceDecrypted);
    std::cout << "Bob's Decrypted Message: " << bobDecrypted << std::endl;

    return 0;
}
